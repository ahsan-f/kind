name: Kubernetes Kind CI Test

on: [push, pull_request]

jobs:
  kind-test:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout code
        # Required to get deployment.yaml onto the runner
        uses: actions/checkout@v4 

      - name: 🛠 Setup Kind Cluster
        # This action automatically installs kind, kubectl, and creates a cluster
        uses: helm/kind-action@v1 

      - name: 🚀 Apply Deployment Manifest
        # Apply the deployment.yaml from the root of the repository
        run: kubectl apply -f deployment.yaml

      - name: ✅ Wait for Deployment to be Ready
        # Waits until the Deployment has the desired number of replicas running
        # NOTE: This uses the 'name' from the deployment.yaml: ci-test-deployment
        run: kubectl rollout status deployment/ci-test-deployment --timeout=5m

      - name: 🔍 Get NodePort for Service
        # Retrieves the random NodePort assigned by Kubernetes
        id: get_port
        run: |
          NODE_PORT=$(kubectl get svc ci-test-service -o=jsonpath='{.spec.ports[0].nodePort}')
          echo "NODE_PORT=$NODE_PORT" >> $GITHUB_OUTPUT
          echo "Service exposed on NodePort: $NODE_PORT"
          
      - name: 🧪 Test Application Endpoint
        # Uses curl to hit the exposed port (on localhost:NodePort) and check for a 200 OK
        run: |
          NODE_PORT=${{ steps.get_port.outputs.NODE_PORT }}
          echo "Curling http://127.0.0.1:$NODE_PORT"
          # Check for 'HTTP/1.1 200 OK' in the response headers
          curl -sI http://127.0.0.1:$NODE_PORT | head -n 1 | grep 'HTTP/1.1 200 OK'
